name: Build Executable

on:
  push:
    branches:
      - main  # 触发主分支的提交事件

jobs:
  build_windows:
    runs-on: windows-latest  # 在 Windows 环境下运行

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # 检出代码到工作环境

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # 设置 Python 版本

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # 安装依赖，确保 requirements.txt 中包含 tkinter 依赖
    
        - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          docker run -v $GITHUB_WORKSPACE:/src cdrx/pyinstaller-windows:latest 'pyinstaller -F --clean -y --dist ./ --workpath /tmp app.py'
          zip -r $GITHUB_WORKSPACE/app.zip $GITHUB_WORKSPACE/app.exe
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/app.zip
        asset_name: image-format-tool.zip
        asset_content_type: application/zip  

  build_linux:
    runs-on: ubuntu-latest  # 在 Linux 环境下运行

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # 检出代码到工作环境

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # 设置 Python 版本

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # 安装依赖，确保 requirements.txt 中包含 tkinter 依赖
   


    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
        echo test, and deploy your project.
        docker run -v $GITHUB_WORKSPACE:/src cdrx/pyinstaller-linux:latest 'pyinstaller -F --clean -y --dist ./ --workpath /tmp app.py'
        zip -r $GITHUB_WORKSPACE/app.zip $GITHUB_WORKSPACE/app
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/app.zip
        asset_name: image-format-tool.zip
        asset_content_type: application/zip  